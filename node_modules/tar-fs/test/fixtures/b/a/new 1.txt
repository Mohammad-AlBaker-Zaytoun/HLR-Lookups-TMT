const express = require("express");
const app = express();
const sql = require("mssql");
const axios = require("axios");
const multer = require("multer");
const fs = require("fs");
const csv = require("csv-parser");
const xlsx = require("xlsx");
const upload = multer({ dest: "uploads/" });

const config = {
  user: "sa",
  password: "protel@88",
  server: "192.168.1.186", // or IP address
  port: 1433,
  database: "FlashCall",
  options: {
    encrypt: true, // for security
    trustServerCertificate: false,
    validateBulkLoadParameters: true,
    enableArithAbort: true,
  },
};

const pool = new sql.ConnectionPool(config);

// pool.connect((err) => {
//   if (err) {
//     console.error(err);
//   } else {
//     console.log("Connected to SQL Server");
//   }
// });

const query = "SELECT * FROM BlackListed_Phones";

// pool.request().query(query, (err, result) => {
//   if (err) {
//     console.error(err);
//   } else {
//     console.log(result.recordset);
//   }
// });

app.get("/", (req, res) => {
  // Lookup for a single number
  res.send("Welcome to Flash CALL BLOCK Project. Specify a route.");
});

app.get("/nb::nb", (req, res) => {
  const phoneNb = req.params.nb;
  console.log(phoneNb);
  axios
    .get(
      //Key          //Secret
      "https://api.tmtvelocity.com/live/json/a48da7ccedf384/6459492cc0278c/" +
        phoneNb
    )
    .then((response) => {
      res.send(response.data);
      console.log(response.data);
    })
    .catch((error) => {
      console.error(error);
    });
});

app.post("/uploadcsv", upload.single("csvFile"), (req, res) => {
  // Lookup for range of number from csv file

  const results = [];
  const oldPath = req.file.path;
  // const newPath = `uploads/${req.file.originalname}`;
  const newPath = `uploads/csv.csv`;
  fs.rename(oldPath, newPath, (err) => {
    if (err) throw err;
    fs.createReadStream(newPath)
      .pipe(csv())
      .on("data", (data) => {
        console.log("Upload and rename was a success");
      })
      .on("end", () => {
        console.log("File uploaded and renamed!");
      });
  });

  fs.createReadStream("uploads/csv.csv")
    .pipe(csv())
    .on("data", (data) => {
      const requiredData = {
        column1: data["numbers"],
      };
      results.push(requiredData);
    })
    .on("end", () => {
      const numbers = results.map(number => number.column1);
      console.log("Looking up for "+ numbers.length + " numbers")
      for (let i = 0; i < results.length; i++) {
        axios
          .get(
            //Key          //Secret
            "https://api.tmtvelocity.com/live/json/a48da7ccedf384/6459492cc0278c/" +
              numbers[i]
          )
          .then((response) => {
            console.log("Checking number: " + numbers[i]);
            console.log(response.data);
          })
          .catch((error) => {
            console.log(error);
            console.error(error);
          });
      }
    });

 

  res.sendStatus(200);
});

app.post("/uploadxlsx", upload.single("xlsxFile"), (req, res) => {
  // Lookup for range of number from csv file
  const results = [];

  const oldPath = req.file.path;
  // const newPath = `uploads/${req.file.originalname}`;
  const newPath = `uploads/xlsx.xlsx`;
  fs.rename(oldPath, newPath, (err) => {
    if (err) throw err;
    const workbook = xlsx.readFile(newPath);
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const data = xlsx.utils.sheet_to_json(sheet, { header: 1 });
    console.log(data);
    console.log("File uploaded and renamed!");
  });

  const workbook = xlsx.readFile("uploads/xlsx.xlsx");
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];

  const desiredColumns = ["numbers"]; // put the names of the columns you want to extract here

  const data = xlsx.utils.sheet_to_json(sheet, { header: 1 });
  const headerRow = data[0];
  const columnIndices = desiredColumns.map((column) =>
    headerRow.indexOf(column)
  );

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const rowData = {};
    for (let j = 0; j < columnIndices.length; j++) {
      const columnIndex = columnIndices[j];
      const column = desiredColumns[j];
      rowData[column] = row[columnIndex];
    }
    results.push(rowData);
  }

  console.log("Looking up for " + results.length + " numbers");
  const numbers = results.map(number => number.numbers);
  for (let i = 0; i < results.length; i++) {
    axios
      .get(
        //Key          //Secret
        "https://api.tmtvelocity.com/live/json/a48da7ccedf384/6459492cc0278c/" +
          numbers[i]
      )
      .then((response) => {
        console.log("Checking number: " + numbers[i]);
        console.log(response.data);
      })
      .catch((error) => {
        console.log(error);
        console.error(error);
      });
  }
  res.sendStatus(200);

});

app.listen(3000, () => {
  console.log("Server started on port 3000...");
});
